name: Blue-Green Deployment CI/CD

on:
  push:
    branches:
      - main  # Trigger the workflow on pushes to the main branch
  pull_request:
    branches:
      - main  # Optionally, trigger on pull requests to the main branch

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}  # AWS region (e.g., us-east-1)
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS access key
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS secret key
      INSTANCE_TYPE: ${{ secrets.INSTANCE_TYPE }}  # EC2 instance type (e.g., t2.micro)
      KEYPAIR_NAME: ${{ secrets.KEY_NAME }}  # EC2 keypair name
      AMI_ID: ${{ secrets.AWS_AMI_ID }}  # AWS AMI ID for the instance

    steps:
      # Step 1: Checkout the Code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10.0  # Set the required Terraform version

      # Step 3: Initialize Terraform (Use -chdir to specify the terraform/ directory)
      - name: Terraform Init
        run: terraform -chdir=terraform init  # Initialize Terraform working directory

      # Step 4: Validate Terraform Configuration (Use -chdir to specify the terraform/ directory)
      - name: Terraform Validate
        run: terraform -chdir=terraform validate  # Validate the Terraform configuration files
        continue-on-error: false  # If validation fails, stop the pipeline

      # Step 5: Terraform Plan (Use -chdir to specify the terraform/ directory)
      - name: Terraform Plan
        run: terraform -chdir=terraform plan -out=terraform.tfplan  # Plan the changes to be made
        continue-on-error: false  # Stop the pipeline if the plan fails

      # Step 6: Deploy Infrastructure (Apply the Plan)
      - name: Terraform Apply
        run: terraform -chdir=terraform apply -auto-approve terraform/terraform.tfplan  # Apply the changes automatically
        continue-on-error: false  # If apply fails, stop the pipeline

      # Step 7: Post Deployment Verification
      - name: Verify Application is Running
        run: |
          echo "Waiting for instances to be ready..."
          sleep 30  # Wait for instances to initialize
          # Get Load Balancer DNS or IP and verify the deployment
          LB_DNS=$(terraform -chdir=terraform output -raw load_balancer_dns)  # Assuming load_balancer_dns is an output variable in Terraform
          echo "Verifying load balancer DNS: $LB_DNS"
          if curl -s --head --request GET "http://$LB_DNS" | grep "200 OK"; then
            echo "Application is up and running"
          else
            echo "Application failed to start"
            exit 1  # Exit with error if application is not running
          fi

      # Step 8: Handle Cleanup or Notifications on Failure (Optional)
      - name: Notify failure on Slack or other
        if: failure()  # Only run if the pipeline fails
        run: |
          echo "Sending failure notification"
          # Add steps to notify on failure (e.g., Slack, email) if desired
          # For example, use curl to call Slack API to send a failure notification.

